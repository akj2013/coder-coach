spring:
  # 자바 객체를 데이터베이스에 매핑하고 조작하는 표준 ORM API입니다.
  # Hibernate는 그 구현체 중 하나이며, Spring Boot에서는 기본적으로 Hibernate를 사용합니다.
  jpa:
    # 전송 쿼리 확인
    show-sql: true # 실행 쿼리를 예쁘게 출력
    properties:
      hibernate:
        # ddl-auto: none # 해당 설정이 없다면, Hibernate는 테이블을 생성하지 않습니다.
          # create: 실행 시마다 기존 테이블 삭제 후 새로 생성
          # update: 변경된 필드에 따라 테이블 컬럼 자동 갱신
          # create-drop: 종료 시점에 테이블도 삭제
          # validate: 엔티티와 DB 스키마의 불일치 검사 (수정은 안 함)
        format_sql: true # 출력되는 SQL 쿼리를 보기 좋게 포맷팅해서 보여줍니다.

    # 테이블 생성 후에 data.sql 실행
    defer-datasource-initialization: true # schema.sql 또는 data.sql 파일이 있다면,
    # JPA가 테이블을 만든 이후에 이 SQL 파일을 실행하겠다는 의미입니다.

  # 데이터베이스 정보 추가
  # AWS를 사용하므로 코멘트 아웃
#  datasource:
#    url: jdbc:h2:mem:testdb
#    username: sa

  # H2 콘솔 활성화
  h2:
    console:
      enabled: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile

server: # Elastic Beanstalk의 기본 설정은 Nginx → 포트 5000에 프록시입니다.
    port: 5000 # Nginx가 Spring Boot 앱에 연결하려 했지만, 해당 포트에서 앱이 실행되지 않아 실패

jwt:
  issuer: test@test.com
  secret_key: test-test
  # Spring Boot의 @ConfigurationProperties는 스네이크 케이스 (secret_key)를 카멜 케이스 (secretKey)로 자동 변환해줍니다.